if: branch =~ ^master$|^development$|^release|^uat
language: python
group: stable
dist: trusty
os: linux
sudo: required
services:
- docker
cache: pip

notifications:
  slack:
    rooms:
      secure: sNmkj7LXuM7/zfrOXBNZYknAHMENqlH1nPR33PoNeP1C9XGKDABDFY59/qXW+qt18wICWVOZVh/o+l4itXyligwCbzpBs7noTdatG7beu5d2tcHBXNTZLJTD5J5c1GYvdaYXYlPyXXsqtydlfW+U4Q0AgZaegnLLhKy26G0OioaSq3zIYl9tJbP6WpSy56Q3QCEN6EbGwzMA3gfcmlQjCAetl5SvnBOV0H6ZVJr2wlF3zJm2AILqpt207D/DkV9vdTl5XT/aIYXj5MZbfj0BZntI9WQJ0LOQA/VOUw+VkE1IebcYsmBQLfSqFwdZ3tUogYgH53QUSggX8vAuK/n7QOH3SzFE/6B0KGV+/OpqkCYm9lOAG79OFGpjHDa2shYjAYV1JDqo+Sn45Zn8+bOsQodQ2wgcwZFXodiQ/wLLMqoNlCrkMnxzwUNhpW0kiZwVqi1WNZQw442OxYTh1zB4xGrphIqZ16oQVkqakIJ0cpF8XUSCNkVN56Fxaqu2YmXJIhm7q/IxWJKDtAykgpgh3N86IPfTNbrhAPIhDcmdzMw2Yp5/a6zPUEMgYMzkei7iwgGA/SVvCmvBF15DyqJGEr+oa+KYLaV3fzZXUcj06r3uknr4lh5enUd/bzH+pXgRwC2YA2Aao2lpDRdZCwXp00bYTT7ux/QmeJN0mEyRCNM=
    on_success: change
    on_failure: always
    on_pull_requests: false

before_install: |-
  if [ "master" == "${TRAVIS_BRANCH}" ]; then
    for env_value in $(compgen -v |grep '.*_PRODUCTION$'); do
      eval export ${env_value%_PRODUCTION}="${!env_value}"
    done
    ENVIRONMENT="production"
  elif [[ "${TRAVIS_BRANCH}" == release*  ]]; then
    for env_value in $(compgen -v |grep '.*_STAGING$'); do
      eval export ${env_value%_STAGING}="${!env_value}"
    done
    ENVIRONMENT="staging"
  elif [[ "${TRAVIS_BRANCH}" == uat*  ]]; then
    for env_value in $(compgen -v |grep '.*_UAT$'); do
      eval export ${env_value%_UAT}="${!env_value}"
    done
    ENVIRONMENT="uat"
  else
    for env_value in $(compgen -v |grep '.*_DEVELOPMENT$'); do
      eval export ${env_value%_DEVELOPMENT}="${!env_value}"
    done
    ENVIRONMENT="development"
  fi

install: |-
  # install awscli for ecr upload
  pip install awscli --upgrade

script: |-
  set -e

  tag_build_num="v${TRAVIS_BUILD_NUMBER}-build"
  export IMAGE="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/$AWS_ECR_NAME:$tag_build_num"
  export IMAGE_LATEST="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/$AWS_ECR_NAME:latest"
  export ECR_LOGIN="aws ecr get-login --registry-ids $AWS_REGISTRY_ID --region $AWS_REGION --no-include-email"
  NAME=$AWS_ECR_NAME

  cp .env.${ENVIRONMENT} .env

  # build test image to run test
  docker build -t test \
    --target installer \
    --build-arg NPM_TOKEN=$NPM_TOKEN \
    .

  docker run --rm \
    -v $PWD/coverage:/srv/coverage \
    test bash -c "
    yarn &&
    yarn tsc &&
    yarn test --coverage --no-watch &&
    yarn eslint --quiet"

  # upload coverage report to codecov
  # bash <(curl -s https://codecov.io/bash) -t "${CODECOV_TOKEN}" -Z

  # build the final image
  docker build -t "$IMAGE" -t $IMAGE_LATEST \
    --build-arg NPM_TOKEN=$NPM_TOKEN \
    --build-arg TRAVIS_BRANCH=$TRAVIS_BRANCH \
    --build-arg TRAVIS_BUILD_NUMBER=$TRAVIS_BUILD_NUMBER \
    --build-arg TRAVIS_COMMIT=$TRAVIS_COMMIT \
    --build-arg TRAVIS_TIMESTAMP="$(date)" \
    .

  # cp static for s3
  docker run --rm \
    -v $PWD/s3_upload:/s3_upload \
    --entrypoint "" \
    $IMAGE \
    bash -c "cp -R /srv/.next /s3_upload/_next"

deploy:
# upload to ecr
- provider: script
  script:  >-
    $(AWS_ACCESS_KEY_ID=$AWS_ECR_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_ECR_SECRET_ACCESS_KEY $ECR_LOGIN)
    && docker push "$IMAGE"
    && docker push "$IMAGE_LATEST"
  skip_cleanup: true
  on:
    all_branches: true
# upload static to s3
- provider: s3
  access_key_id: $AWS_S3_ACCESS_KEY_ID
  secret_access_key: $AWS_S3_SECRET_ACCESS_KEY
  bucket: $AWS_S3_BUCKET
  region: $AWS_REGION
  local_dir: s3_upload
  skip_cleanup: true
  on:
    all_branches: true
